from datetime import datetime, timedelta
import sqlite3
import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot


load_dotenv()
bot = Bot(os.getenv("TOKEN_NAIL"))
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMINS_NAIL", "–ë–∞").split(",")]


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    conn = sqlite3.connect("appointments.db")
    cursor = conn.cursor()

    while True:
        try:
            now = datetime.now()
            target_time = now.replace(hour=10, minute=0, second=0, microsecond=0)  # 10:00 —É—Ç—Ä–∞

            if now > target_time:
                target_time += timedelta(days=1)  # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è

            wait_time = (target_time - now).total_seconds()
            await asyncio.sleep(wait_time)  # –ñ–¥—ë–º –¥–æ 10:00

            tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d-%m-%Y")
            cursor.execute("SELECT user_id, name, phone, date, time FROM appointments WHERE date = ? "
                           "ORDER BY time ASC", (tomorrow,))
            appointments = cursor.fetchall()

            if appointments:
                for user_id, name, phone, date, time in appointments:
                    message = (
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                        f"üíÖ –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ –º–∞–Ω–∏–∫—é—Ä!\n"
                        f"üìÖ –î–∞—Ç–∞: {date}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {time}\n"
                        f"–ñ–¥—ë–º –≤–∞—Å! üòä"
                    )
                    try:
                        await bot.send_message(user_id, message)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É {user_id}: {e}")

                admin_message = "üìã –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n"
                admin_message += "\n\n".join([
                    f"üë§ {name}\nüìû {phone}\n‚è∞ {time}" for _, name, phone, _, time in appointments
                ])

                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(admin_id, f"\n{admin_message}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ send_reminders: {e}")
            await asyncio.sleep(3600)  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∂–¥–µ–º —á–∞—Å –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
async def delete_old_appointments():
    conn = sqlite3.connect("appointments.db")
    cursor = conn.cursor()
    while True:
        try:
            today = datetime.now().strftime("%d-%m-%Y")

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π
            cursor.execute("DELETE FROM appointments WHERE date < ?", (today,))
            conn.commit()

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –≤ 00:00
            now = datetime.now()
            next_run = datetime.combine(now.date() + timedelta(days=1), datetime.min.time())
            sleep_seconds = (next_run - now).total_seconds()

            # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)
            await asyncio.sleep(sleep_seconds)  # 24 —á–∞—Å–∞

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ delete_old_appointments: {e}")
            await asyncio.sleep(3600)  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∂–¥–µ–º —á–∞—Å –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞


