from dotenv import load_dotenv
import os
import sqlite3
from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from keyboards import admin_kb, cancel_keyboard_admin
from handlers import available_dates, available_times_for_dates, date_keyboard, update_available_dates
from create_bd import add_appointment

load_dotenv()
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMINS_NAIL", "").split(",")]

admin_router = Router()


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã
class AdminState(StatesGroup):
	view_date = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
	name = State()
	phone = State()
	date = State()
	time = State()


# –î–æ–±–∞–≤–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
class DeleteState(StatesGroup):
	waiting_for_date = State()
	waiting_for_id = State()


@admin_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏")
async def cancel_handler(message: Message, state: FSMContext):
	await state.clear()
	await message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é", reply_markup=admin_kb)


@admin_router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –º–∞–Ω–∏–∫—é—Ä")
async def admin_book(message: Message, state: FSMContext):
	if not available_dates:
		await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")
		return

	user_id = message.from_user.id
	if user_id in ADMIN_IDS:
		await state.set_state(AdminState.name)
		await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard_admin)
	else:
		await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@admin_router.message(AdminState.name)
async def admin_get_name(message: Message, state: FSMContext):
	if message.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏":
		return await cancel_handler(message, state)

	await state.update_data(name=message.text)
	await state.set_state(AdminState.phone)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard_admin)


@admin_router.message(AdminState.phone)
async def admin_get_phone(message: Message, state: FSMContext):
	if message.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏":
		return await cancel_handler(message, state)
	await state.update_data(phone=message.text)
	await state.set_state(AdminState.date)
	await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_keyboard)


@admin_router.message(AdminState.date)
async def admin_get_date(message: Message, state: FSMContext):
	selected_date = message.text.strip()
	update_available_dates()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º

	if selected_date not in available_dates:
		await message.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
		return

	await state.update_data(date=selected_date)
	available_times = available_times_for_dates.get(selected_date, [])

	if not available_times:
		await message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
		return

	time_buttons = [[KeyboardButton(text=time)] for time in available_times]
	time_buttons.append(
		[KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏")]
	)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	time_keyboard = ReplyKeyboardMarkup(keyboard=time_buttons, resize_keyboard=True)
	await state.set_state(AdminState.time)
	await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard)


@admin_router.message(AdminState.time)
async def admin_get_time(message: Message, state: FSMContext):
	user_data = await state.get_data()
	selected_time = message.text.strip()

	if selected_time == "–ù–∞–∑–∞–¥":
		await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_keyboard)
		await state.set_state(AdminState.date)
		return

	selected_date = user_data.get("date")

	try:
		datetime.strptime(selected_time, "%H:%M")
	except ValueError:
		await message.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è.")
		return

	with sqlite3.connect("appointments.db") as conn:
		cursor = conn.cursor()
		cursor.execute(
			"SELECT * FROM appointments WHERE date = ? AND time = ?",
			(selected_date, selected_time)
		)
		existing_appointment = cursor.fetchone()

	if existing_appointment:
		await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
	else:
		add_appointment(
			user_data["name"], user_data["phone"], selected_date, selected_time,
			user_id=None
		)  # user_id=None –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
		confirmation_text = (
			f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüìÖ –î–∞—Ç–∞: {datetime.strptime(selected_date, '%d-%m-%Y').strftime(
				'%d-%m-%Y'
			)}\n‚è∞ "
			f"–í—Ä–µ–º—è: {selected_time}\nüë§ –ò–º—è: {user_data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n\n–ñ–¥—ë–º –≤–∞—Å! üöóüíÖ"
		)
		await message.answer(confirmation_text, reply_markup=admin_kb)
		await state.clear()

		# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
		update_available_dates()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç—ã
@admin_router.message(AdminState.view_date)
async def handle_admin_date(message: Message, state: FSMContext):
	date_input = message.text.strip()

	try:
		datetime.strptime(date_input, "%d-%m-%Y")
	except ValueError:
		await message.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY.")
		return

	with sqlite3.connect("appointments.db") as conn:
		cursor = conn.cursor()
		cursor.execute(
			"SELECT id, user_id, name, phone, date, time FROM appointments WHERE date = ? ORDER BY time ASC",
			(date_input,)
		)
		appointments = cursor.fetchall()

	if appointments:
		appointments_text = "\n\n".join(
			[f"ID: {id}\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìÖ –î–∞—Ç–∞: "
			 f"{datetime.strptime(date, '%d-%m-%Y').strftime('%d-%m-%Y')}\n‚è∞ –í—Ä–µ–º—è: {time}"
			 for id, user_id, name, phone, date, time in appointments]
		)
		await message.answer(f"–ó–∞–ø–∏—Å–∏ –Ω–∞ {date_input}:\n{appointments_text}", reply_markup=admin_kb)
	else:
		await message.answer(f"–ù–∞ {date_input} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

	await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π


@admin_router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def start_delete(message: Message, state: FSMContext):
	user_id = message.from_user.id
	if user_id not in ADMIN_IDS:
		await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return

	await message.answer(
		"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.",
		reply_markup=ReplyKeyboardRemove()
	)
	await state.set_state(DeleteState.waiting_for_date)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@admin_router.message(DeleteState.waiting_for_date)
async def get_appointments_by_date(message: Message, state: FSMContext):
	try:
		date_str = message.text
		datetime.strptime(date_str, "%d-%m-%Y")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

		with sqlite3.connect("appointments.db") as conn:
			cursor = conn.cursor()
			cursor.execute(
				"SELECT id, name, phone, date, time FROM appointments WHERE date = ? ORDER BY time",
				(date_str,)
			)
			appointments = cursor.fetchall()

		if not appointments:
			await message.answer("‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=admin_kb)
			await state.clear()
			return

		response = f"üìÖ *–ó–∞–ø–∏—Å–∏ –Ω–∞ {date_str}:*\n\n"
		for appointment in appointments:
			response += (
				f"*ID:* {appointment[0]}\n"
				f"üë§ *–ò–º—è:* {appointment[1]}\n"
				f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {appointment[2]}\n"
				f"üìÜ *–î–∞—Ç–∞:* {appointment[3]}\n"
				f"‚è∞ *–í—Ä–µ–º—è:* {appointment[4]}\n\n"
			)

		await message.answer(response, parse_mode="Markdown")
		await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ *ID –∑–∞–ø–∏—Å–∏*, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
		await state.update_data(date=date_str)
		await state.set_state(DeleteState.waiting_for_id)

	except ValueError:
		await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *DD-MM-YYYY*.")


@admin_router.message(DeleteState.waiting_for_id)
async def delete_appointment_by_id(message: Message, state: FSMContext):
	try:
		appointment_id = int(message.text)
	except ValueError:
		await message.answer("‚ö† ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return

	with sqlite3.connect("appointments.db") as conn:
		cursor = conn.cursor()
		cursor.execute("SELECT id, name, date, time FROM appointments WHERE id = ?", (appointment_id,))
		appointment = cursor.fetchone()

		if not appointment:
			await message.answer("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
			return

		cursor.execute("DELETE FROM appointments WHERE id = ?", (appointment_id,))
		conn.commit()

		await message.answer(
			f"‚úÖ –ó–∞–ø–∏—Å—å *ID {appointment_id}* —É–¥–∞–ª–µ–Ω–∞:\n"
			f"üë§ *–ò–º—è:* {appointment[1]}\n"
			f"üìÜ *–î–∞—Ç–∞:* {appointment[2]}\n"
			f"‚è∞ *–í—Ä–µ–º—è:* {appointment[3]}",
			parse_mode="Markdown", reply_markup=admin_kb
		)

	await state.clear()
	update_available_dates()


@admin_router.message(F.text == "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
async def all_appointments(message: Message):
	user_id = message.from_user.id
	if user_id not in ADMIN_IDS:
		await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return

	try:
		with sqlite3.connect("appointments.db") as conn:
			cursor = conn.cursor()
			cursor.execute("SELECT date, time, name, phone FROM appointments ORDER BY date, time")
			appointments = cursor.fetchall()

		if not appointments:
			await message.answer("üìå –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=admin_kb)
			return

		response_text = "üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π:**\n\n"
		count = 0

		for date, time, name, phone in appointments:
			response_text += (f"üìÖ {datetime.strptime(date, '%d-%m-%Y').strftime('%d-%m-%Y')} \n"
							  f"‚è∞ {time}\nüë§ {name}\n üìû {phone}\n\n")
			count += 1

			if count % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				await message.answer(response_text, reply_markup=admin_kb)
				response_text = ""

		if response_text:
			await message.answer(response_text, reply_markup=admin_kb)

		# –û—Ç–ø—Ä–∞–≤–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
		total = len(appointments)
		await message.answer(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}", reply_markup=admin_kb)

	except sqlite3.Error as e:
		print(f"[–û—à–∏–±–∫–∞ –ë–î] {e}")  # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
		await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π.")


conn = sqlite3.connect("appointments.db")
cursor = conn.cursor()
