import os
from dotenv import load_dotenv

import asyncio
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, Router
from aiogram.fsm.state import State, StatesGroup
import sqlite3
from datetime import datetime

from create_bd import create_available_keyboards, add_appointment
from other_function import send_reminders, delete_old_appointments


load_dotenv()
TOKEN = os.getenv("TOKEN_NAIL")

dp = Dispatcher()
bot = Bot(TOKEN)
router = Router()

ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMINS_NAIL", "").split(",")]


class Booking(StatesGroup):
    name = State()
    phone = State()
    date = State()
    time = State()


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã
class AdminState(StatesGroup):
    view_date = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
    name = State()
    phone = State()
    date = State()
    time = State()


# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
def update_available_dates():
    global available_dates, available_times_for_dates, date_keyboard
    available_dates, available_times_for_dates = create_available_keyboards()
    if available_dates is None:
        date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç")]], resize_keyboard=True)
    else:
        date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=date)] for date in available_dates], resize_keyboard=True)


@router.message(Command("admin_book"))
async def admin_book(message: Message, state: FSMContext):
    if not available_dates:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")
        return

    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
        await state.set_state(AdminState.name)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@router.message(AdminState.name)
async def admin_get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(AdminState.phone)


@router.message(AdminState.phone)
async def admin_get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_keyboard)
    await state.set_state(AdminState.date)


@router.message(AdminState.date)
async def admin_get_date(message: Message, state: FSMContext):
    selected_date = message.text.strip()

    if selected_date not in available_dates:
        await message.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return

    await state.update_data(date=selected_date)
    available_times = available_times_for_dates.get(selected_date, [])

    if not available_times:
        await message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return

    time_buttons = [[KeyboardButton(text=time)] for time in available_times]
    time_keyboard = ReplyKeyboardMarkup(keyboard=time_buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard)
    await state.set_state(AdminState.time)


@router.message(AdminState.time)
async def admin_get_time(message: Message, state: FSMContext):
    user_data = await state.get_data()
    selected_time = message.text.strip()
    selected_date = user_data.get("date")

    try:
        datetime.strptime(selected_time, "%H:%M")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è.")
        return

    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM appointments WHERE date = ? AND time = ?",
                       (selected_date, selected_time))
        existing_appointment = cursor.fetchone()

    if existing_appointment:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
    else:
        add_appointment(user_data["name"], user_data["phone"], selected_date, selected_time,
                        user_id=None)  # user_id=None –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        confirmation_text = (
            f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüìÖ –î–∞—Ç–∞: {selected_date}\n‚è∞ –í—Ä–µ–º—è: {selected_time}\n"
            f"üë§ –ò–º—è: {user_data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n\n–ñ–¥—ë–º –≤–∞—Å! üöóüíÖ"
        )
        await message.answer(confirmation_text, reply_markup=ReplyKeyboardRemove())
        await state.clear()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        update_available_dates()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
available_dates, available_times_for_dates = create_available_keyboards()
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
if not available_dates:
    date_keyboard = None
else:
    date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=date)] for date in available_dates],
                                        resize_keyboard=True)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    if not available_dates:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Booking.name)


@router.message(Booking.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Booking.phone)


@router.message(Booking.phone)
async def get_phone(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(phone=message.text, user_id=user_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_keyboard)
    await state.set_state(Booking.date)


@router.message(Booking.date)
async def get_date(message: Message, state: FSMContext):
    if not available_dates:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")
        return

    selected_date = message.text.strip()

    if selected_date not in available_dates:
        await message.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return

    await state.update_data(date=selected_date)
    available_times = available_times_for_dates.get(selected_date, [])

    if not available_times:
        await message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return

    time_buttons = [[KeyboardButton(text=time)] for time in available_times]
    time_keyboard = ReplyKeyboardMarkup(keyboard=time_buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard)
    await state.set_state(Booking.time)


@router.message(Booking.time)
async def get_time(message: Message, state: FSMContext):
    user_data = await state.get_data()
    selected_time = message.text.strip()
    selected_date = user_data.get("date")
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        datetime.strptime(selected_time, "%H:%M")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è
    if not add_appointment(user_data["name"], user_data["phone"], selected_date, selected_time, user_id):
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –±—É–¥—É—â–µ–º
        return

    confirmation_text = (
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüìÖ –î–∞—Ç–∞: {selected_date}\n‚è∞ –í—Ä–µ–º—è: {selected_time}\n"
        f"üë§ –ò–º—è: {user_data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n\n–ñ–¥—ë–º –≤–∞—Å! üöóüíÖ"
    )
    await message.answer(confirmation_text, reply_markup=ReplyKeyboardRemove())
    await state.clear()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    update_available_dates()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "ist", —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥ –≤–≤–æ–¥–∏—Ç—å –ª—é–±—É—é –¥–∞—Ç—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏
@router.message(Command("list"))
async def view_appointments(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
        await state.set_state(AdminState.view_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


conn = sqlite3.connect("appointments.db")
cursor = conn.cursor()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç—ã
@router.message(AdminState.view_date)
async def handle_admin_date(message: Message, state: FSMContext):
    date_input = message.text.strip()

    try:
        datetime.strptime(date_input, "%Y-%m-%d")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")
        return

    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, user_id, name, phone, date, time FROM appointments WHERE date = ? ORDER BY time ASC",
                       (date_input,))
        appointments = cursor.fetchall()

    if appointments:
        appointments_text = "\n\n".join(
            [f"ID: {id}\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìÖ –î–∞—Ç–∞: {date}\n‚è∞ –í—Ä–µ–º—è: {time}"
             for id, user_id, name, phone, date, time in appointments]
        )
        await message.answer(f"–ó–∞–ø–∏—Å–∏ –Ω–∞ {date_input}:\n{appointments_text}")
    else:
        await message.answer(f"–ù–∞ {date_input} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä
@router.message(Command("cancel"))
async def cancel_appointment(message: Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_path = "appointments.db"
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, date, time FROM appointments WHERE user_id = ?", (user_id,))
            appointment = cursor.fetchone()

            if appointment:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                cursor.execute("DELETE FROM appointments WHERE id = ?", (appointment[0],))
                conn.commit()

                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                cancellation_text = f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {appointment[1]} –≤ {appointment[2]} –æ—Ç–º–µ–Ω–µ–Ω–∞."
                await message.answer(cancellation_text)
                update_available_dates()
            else:
                await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
    except sqlite3.Error as e:
        print(f"Database error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è


@router.message(Command("delete"))
async def delete_appointment_by_id(message: Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /delete <ID_–∑–∞–ø–∏—Å–∏>\n–ü—Ä–∏–º–µ—Ä: `/delete 5`",
                             parse_mode="MarkdownV2")
        return

    appointment_id = command_parts[1]

    try:
        appointment_id = int(appointment_id)
    except ValueError:
        await message.answer("‚ö† ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    with sqlite3.connect("appointments.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, date, time FROM appointments WHERE id = ?", (appointment_id,))
        appointment = cursor.fetchone()

        if not appointment:
            await message.answer("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        cursor.execute("DELETE FROM appointments WHERE id = ?", (appointment_id,))
        conn.commit()

        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å ID {appointment_id} ({appointment[1]}, {appointment[2]} –≤ {appointment[3]}) —É–¥–∞–ª–µ–Ω–∞.")

    update_available_dates()


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(send_reminders())

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    asyncio.create_task(delete_old_appointments())
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())