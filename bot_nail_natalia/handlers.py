import os
from dotenv import load_dotenv

from aiogram.fsm.state import State, StatesGroup
import sqlite3
from aiogram import types
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, BotCommandScopeChat
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from other_function import bot
from create_bd import create_available_keyboards, add_appointment
from keyboards import admin_kb, user_kb, cancel_keyboard

load_dotenv()
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMINS_NAIL", "").split(",")]

router = Router()


class Booking(StatesGroup):
    name = State()
    phone = State()
    date = State()
    time = State()


# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
def update_available_dates():
    global available_dates, available_times_for_dates, date_keyboard
    available_dates, available_times_for_dates = create_available_keyboards()
    if available_dates is None:
        date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç")]], resize_keyboard=True)
    else:
        date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=date)] for date in available_dates],
                                            resize_keyboard=True)


@router.message(F.text == "‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä¬ª —Å–Ω–æ–≤–∞.",
                         reply_markup=user_kb)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
available_dates, available_times_for_dates = create_available_keyboards()
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
if not available_dates:
    date_keyboard = None
else:
    date_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=date)] for date in available_dates],
                                        resize_keyboard=True)


@router.message(CommandStart())
async def cmd_start(message: Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start –≤ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands(
        [types.BotCommand(command="/start", description="–ù–∞–∂–º–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏ –º–µ–Ω—é –ø–æ—è–≤–∏—Ç—Å—è")],
        scope=BotCommandScopeChat(chat_id=message.chat.id)
    )

    if message.from_user.id in ADMIN_IDS:
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É –∞–¥–º–∏–Ω–æ–≤
        await bot.set_my_commands([], scope=BotCommandScopeChat(chat_id=message.chat.id))
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: ', reply_markup=admin_kb)
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä üíÖ‚ú® –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –∏ —è –≤—Å–µ –∑–∞–ø–æ–º–Ω—é! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!",
            reply_markup=user_kb
        )


@router.message(F.text == "üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä")
async def list_create(message: Message, state: FSMContext):
    if not available_dates:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")
        return

    if message.text == "‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å":
        return await cancel_handler(message, state)

    await state.set_state(Booking.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏: ', reply_markup=cancel_keyboard)


@router.message(Booking.name)
async def get_name(message: Message, state: FSMContext):
    if message.text == "‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å":
        return await cancel_handler(message, state)

    await state.update_data(name=message.text)
    await state.set_state(Booking.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel_keyboard)


@router.message(Booking.phone)
async def get_phone(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(phone=message.text, user_id=user_id)
    await state.set_state(Booking.date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_keyboard)


@router.message(Booking.date)
async def get_date(message: Message, state: FSMContext):
    update_available_dates()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º

    if not available_dates:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")
        return

    selected_date = message.text.strip()

    await state.update_data(date=selected_date)
    available_times = available_times_for_dates.get(selected_date, [])

    if not available_times:
        await message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return

    if message.text == "‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å":
        return await cancel_handler(message, state)

    time_buttons = [[KeyboardButton(text=time)] for time in available_times]
    time_buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å")])
    time_keyboard = ReplyKeyboardMarkup(keyboard=time_buttons, resize_keyboard=True)
    await state.set_state(Booking.time)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard)


@router.message(Booking.time)
async def get_time(message: Message, state: FSMContext):
    user_data = await state.get_data()
    selected_time = message.text.strip()

    if selected_time == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_keyboard)
        await state.set_state(Booking.date)
        return

    selected_date = user_data.get("date")
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        datetime.strptime(selected_time, "%H:%M")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è
    if not add_appointment(user_data["name"], user_data["phone"], selected_date, selected_time,
                           user_id):
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é.",
            reply_markup=user_kb
        )
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –±—É–¥—É—â–µ–º
        return

    confirmation_text = (
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüìÖ –î–∞—Ç–∞: {selected_date}\n‚è∞ –í—Ä–µ–º—è: {selected_time}\n"
        f"üë§ –ò–º—è: {user_data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n\n–ñ–¥—ë–º –≤–∞—Å! üöóüíÖ"
    )
    await message.answer(confirmation_text, reply_markup=user_kb)
    await state.clear()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    update_available_dates()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cancel_appointment(message: Message, state: FSMContext):
    user_id = message.from_user.id
    today_date = datetime.now().strftime("%d-%m-%Y")

    db_path = "appointments.db"
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, date, time FROM appointments WHERE user_id = ?", (user_id,))
            appointments = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if not appointments:
                await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                return

            # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å ‚Äì —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
            if len(appointments) == 1:
                appointment_id, appointment_date, appointment_time = appointments[0]

                cursor.execute("DELETE FROM appointments WHERE id = ?", (appointment_id,))
                conn.commit()

                await message.answer(f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {appointment_date} –≤ {appointment_time} –æ—Ç–º–µ–Ω–µ–Ω–∞.")

                # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                if appointment_date == today_date:
                    alert_text = (f"<b>‚ùó –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –≤ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞ ‚ùó</b>\n"
                                  f"üìÖ –î–∞—Ç–∞: {appointment_date}\n‚è∞ –í—Ä–µ–º—è: {appointment_time}")
                    for admin_id in ADMIN_IDS:
                        await bot.send_message(admin_id, alert_text, parse_mode="HTML")

                update_available_dates()
                await state.clear()
                return

            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            buttons = [[KeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {date} {time}")] for _, date, time in appointments]
            buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])  # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)

    except sqlite3.Error as e:
        print(f"Database error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cancel_cancel(message: Message, state: FSMContext):
    await message.answer("üö´–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ?", reply_markup=user_kb)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@router.message(F.text.startswith("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å "))
async def process_cancel_reply(message: Message):
    text = message.text.replace("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ", "")  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç
    try:
        appointment_date, appointment_time = text.split()  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

        with sqlite3.connect("appointments.db") as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM appointments WHERE date = ? AND time = ? AND user_id = ?",
                           (appointment_date, appointment_time, message.from_user.id))
            conn.commit()

        await message.answer(f"‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ {appointment_date} –≤ {appointment_time} –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=user_kb)

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞
        today_date = datetime.now().strftime("%d-%m-%Y")
        if appointment_date == today_date:
            alert_text = (f"<b>‚ùó –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –≤ –¥–µ–Ω—å –ø—Ä–∏—ë–º–∞ ‚ùó</b>\n"
                          f"üìÖ –î–∞—Ç–∞: {appointment_date}\n‚è∞ –í—Ä–µ–º—è: {appointment_time}")
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, alert_text, parse_mode="HTML")

        update_available_dates()

    except ValueError:
        await message.answer("‚ö† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

